#pragma once

#ifndef _ACTONE_CLASS_
#define _ACTONE_CLASS_

#include "Extras/OVR_Math.h"
#include "SpecScript.class"

#pragma warning(disable : 4584) // Disabled because of following Level 1 Warning, BY DESIGN
class ActOne : public SpecScript, public Script
{
    private: float curIndex;

    public: Beats beats;

    public: ActOne() {}
    public: ~ActOne() {}

public: void SetTheStage()
{
    Prop *prop;

    prop = new Prop(Vector3f(4, 0, -45), nullptr);  // Runway lights, right side NO material texture used (nullptr)
    for (int nx = 0; nx < 300; nx += 5)
    {
        prop->AddSolidColorBox(0.0f, 0.0f, float(nx), 0.1f, 0.1f, float(nx) + 0.1f, 0xff000044);
    }

    ((Scene*)Globals::myScene)->AddProp(prop, "RUNWAY LIGHTS LEFT SIDE");

    prop = new Prop(Vector3f(-4, 0, -45), nullptr);   // Runway lights, right side NO material texture used (nullptr)
    for (int nx = 0; nx < 300; nx += 5)
    {
        prop->AddSolidColorBox(0.0f, 0.0f, float(nx), 0.1f, 0.1f, float(nx) + 0.1f, 0xff000044); // Runway lights, left side
    }

    ((Scene*)Globals::myScene)->AddProp(prop, "RUNWAY LIGHTS RIGHT SIDE");

    prop = new Prop(Vector3f(0, 0, 13), ((Scene*)Globals::myScene)->grid_material[Scene::MaterialTextures::RUNWAY]);

    prop->AddVertex(Vertex(4, 0, -61, 0, 0, 0xff151515)); // runway grey
    prop->AddVertex(Vertex(-4, 0, -61, 1, 0, 0xff151515));
    prop->AddVertex(Vertex(4, 0, 241.1f, 0, 25, 0xff151515));
    prop->AddVertex(Vertex(-4, 0, 241.1f, 1, 25, 0xff151515));

    prop->AddIndexes(vector<GLushort> { 0, 1, 2, 1, 2, 3,		// FRONT SIDE
        3, 2, 1, 2, 1, 0  }); // BACK SIDE 

    ((Scene*)Globals::myScene)->AddProp(prop, "RUNWAY");

    prop = new Prop(Vector3f(0, 0, 0), ((Scene*)Globals::myScene)->grid_material[Scene::MaterialTextures::BLANK]);

    prop->AddVertex(Vertex(-10, 2, 100, 0, 0, 0xffffffff));
    prop->AddVertex(Vertex(-10, 2, 120, 1, 0, 0xffffffff));
    prop->AddVertex(Vertex(-10, 2.1f, 120, 0, 1, 0xffffffff));
    prop->AddVertex(Vertex(-10, 2.1f, 100, 1, 1, 0xffffffff));

    prop->AddIndexes(vector<GLushort>
    { 0, 1, 2, 0, 2, 3,
        3, 2, 0, 2, 1, 0  });

    prop->AddVertex(Vertex(10, 3.5, 110, 0, 0, 0xff00ffff));
    prop->AddVertex(Vertex(10, 3.5, 130, 1, 0, 0xff00ffff));
    prop->AddVertex(Vertex(10, 3.6f, 130, 0, 1, 0xff00ffff));
    prop->AddVertex(Vertex(10, 3.6f, 110, 1, 1, 0xff00ffff));

    prop->AddIndexes(vector<GLushort>
    { 4, 5, 6, 4, 6, 7,
        7, 6, 4, 6, 5, 4  });

    prop->AddVertex(Vertex(8, 1.5, 90, 0, 0, 0xffffffff));
    prop->AddVertex(Vertex(8, 1.5, 95, 1, 0, 0xffffffff));
    prop->AddVertex(Vertex(8, 1.6f, 95, 0, 1, 0xffffffff));
    prop->AddVertex(Vertex(8, 1.6f, 90, 1, 1, 0xffffffff));

    prop->AddIndexes(vector<GLushort>
    { 8, 9, 10, 8, 10, 11,
        11, 10, 8, 10, 9, 8  });

    ((Scene*)Globals::myScene)->AddProp(prop, "SIDE LIGHTS");

    // reposition the Prop to before the viewer. 
    ((Scene*)Globals::myScene)->Props["SIDE LIGHTS"]->position.z = -250.0f;

    curIndex = float(0xff);
}

public: void Action()
{
    for (auto beat = beats.begin(); beat != beats.end(); beat++)
    {
            beat->second->name = "TEST";
    }

    for (int x = 0; x < (int)((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS LEFT SIDE"]->Vertices.size(); x++)
    {
        int curCube = int(float(x) / 24.0f);
        DWORD curColor = DWORD(0xff000000) | ((DWORD(curCube + curIndex) & 0x000000ff) << 16);

        ((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS LEFT SIDE"]->Vertices[x].C = curColor;
        ((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS RIGHT SIDE"]->Vertices[x].C = curColor;
    }

    ((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS LEFT SIDE"]->FreeBuffers();
    ((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS LEFT SIDE"]->AllocateBuffers();
    ((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS RIGHT SIDE"]->FreeBuffers();
    ((Scene*)Globals::myScene)->Props["RUNWAY LIGHTS RIGHT SIDE"]->AllocateBuffers();

    Sleep(10);

    curIndex -= 6.2f;
    if (curIndex < 0)
        curIndex = float(0xff);

    return;
}

public: void Lights() { return; }
public: void Camera() { return; }
public: void Actors() { return;  };
public: Beats BeatSheet() { return beats;  };
public: bool isSceneComplete() { return false; }
public: std::string Name() { return "Act One"; }

};


#endif _ACTONE_CLASS_
